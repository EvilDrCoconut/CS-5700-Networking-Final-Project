/**
 * Created by Rob on 4/12/16.
 */

var FF = FF || {};

/**
 * FF - responsive.js
 *
 *
 */
FF.responsive = (function ($) {

    var els = {};

    var pub = {};

    pub.init = init;
    pub.update = update;
    pub.getCurrentBreakpoint = function() {
        return currentBreakpoint || '';
    }

    var currentBreakpoint,
        lastBreakpoint;

    // Note, the eq.js uses the $= selector.  So, you can't use a point that ends with the name of another point
    // example -- x-small and small will be the same selector.
    var eqBreakpoints = {
        small: 400,
        medium: 760,
        large: 1100
    };


    function init() {

        // create an instance of mobile detect and make it global
        var md = new MobileDetect(window.navigator.userAgent);
        window.mobileDetect = md;

        // Add classes to body if appropriate
        els.body = $('body');
        if(md.mobile()) els.body.addClass('mobile');
        if(md.phone()) els.body.addClass('phone');
        if(md.tablet()) els.body.addClass('tablet');

        // Create a listener to monitor the breakpoints mixin in CSS
        els.after = window.getComputedStyle(document.body, ':after');

        //els.after.replace(/['"]+/g, '');

        // Listen for the breakpoint-change event and add or remove classes on body
        $(window).on('breakpoint-change', function(e, breakpoint) {

            removeBPClasses();

            breakpoint = breakpoint.replace(/['"]+/g, '');

            switch(breakpoint) {
                case 'bp-small':
                    els.body.addClass('bp-small');
                    els.body.attr('breakpoint', 'bp-small');
                    break;
                case 'bp-medium':
                    els.body.addClass('bp-medium');
                    els.body.attr('breakpoint', 'bp-medium');
                    break;
                case 'bp-large':
                    els.body.addClass('bp-large');
                    els.body.attr('breakpoint', 'bp-large');
                    break;
                default:
                // No class for mobile -- do nothing
            }
        });

        // Listen to resize events, grab new breakpoint and notify if applicable
        $(window).on('resize orientationchange load', update);
    }

    /**
     * Resizehandler
     */
    function update() {

        currentBreakpoint = els.after.getPropertyValue('content');
        if (currentBreakpoint !== lastBreakpoint) {
            $(window).trigger('breakpoint-change', currentBreakpoint);
            lastBreakpoint = currentBreakpoint;
        }

        // Add the EQ points for element break points
        var component = $('.element-container');
        $.each(component, function(i, el) {
            // only add the eq points if the are undefined
            if(!el.attributes['data-eq-pts']) {
                eqjs.definePts(el, eqBreakpoints);
            }
        });

        eqjs.refreshNodes();
        eqjs.query();

    }

    function removeBPClasses() {
        els.body.removeClass('bp-small bp-medium bp-large bp-xlarge');
        els.body.attr('breakpoint', '');
    }

    return pub;

})(jQuery);

jQuery(document).ready(FF.responsive.init);
