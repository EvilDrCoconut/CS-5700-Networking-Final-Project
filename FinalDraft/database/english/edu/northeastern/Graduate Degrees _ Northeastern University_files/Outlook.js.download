(function() {
  var BUBBLES = {
    width: 500,
    height: 500,
    init: function() {
      d3.json( baseURL + '/wp-content/themes/nu/components/Outlook/overview.json', function(error, data) {
        if (data) {
          var max = 0,
              min = 10000;


          // Determine the max and min values from data to set our scale.
          if (data.jobs) {
            data.jobs.forEach(function(job) {
              if (job.value > max) {
                max = job.value;
              }

              if (job.value < min) {
                min = job.value;
              }
            });
          }

          var svg = d3.select('.bubble-chart');

          var sizeScale = d3.scaleLinear().domain([min, max]).range([20, 80]);

          var simulation = d3.forceSimulation()
              .alphaDecay(0.05)
              .force("charge", d3.forceManyBody().strength(1000))
              .force("y", d3.forceY(0))
              .force("x", d3.forceX(0))
              .force("center",
                d3.forceCenter(BUBBLES.width / 2, BUBBLES.height / 2));

          var nodes = svg.selectAll(".node")
              .data(data.jobs)
              .enter()
              .append("g")
              .classed("node", true)
              .each(function(d) {
                var radius = Math.round(sizeScale(d.value));
                if (radius >= 60) {
                  d3.selectAll(".node").filter(function(da) {
                    return da.value === d.value;
                  }).classed('large', true);
                } else {
                  d3.selectAll(".node").filter(function(da) {
                    return da.value === d.value;
                  }).classed('small', true);
                }
              })
              .on("click", function(d) {
                d3.selectAll(".node")
                  .classed("active", false)
                  .select(".circle")
                  .transition()
                  .duration(250)
                  .attr("r", function(d) {
                    d.radius = d.originalRadius;
                    return d.radius;
                  })

                d3.selectAll(".node")
                  .selectAll(".foreign-object")
                  .attr("x", function(d) {
                    return Math.round((d.originalRadius * -1) + 5);
                  })
                  .attr("width", function(d) {
                    return (d.radius * 2) - 10;
                  });

                d3.selectAll(".node")
                  .selectAll('.sub-object')
                  .attr("y", function(d) {
                    if (d.radius >= 60) {
                      return 0;
                    } else {
                      return -9;
                    }
                  })

                d3.select(this)
                  .classed("active", true)
                  .select(".circle")
                  .transition()
                  .duration(250)
                  .attr("r", function(d) {
                    d.radius = 120;
                    return 120;
                  })

                d3.select(this)
                  .selectAll(".foreign-object")
                  .attr("x", function(d) {
                    return -120;
                  })
                  .attr("width", function(d) {
                    return 240;
                  });

                d3.select(this)
                  .select('.full-object')
                  .attr("y", function(d) {
                    return -24;
                  })

                d3.select(this)
                  .select('.extra-long')
                  .attr("y", function(d) {
                    return -48;
                  })

                d3.select(this)
                  .select('.sub-object')
                  .attr("y", function(d) {
                    return 0;
                  })

                simulation.nodes(data.jobs);
                simulation.alpha(0.8).restart();
              })
              .call(d3.drag()
                .on("start", dragstarted)
                .on("drag", dragged)
                .on("end", dragended));

          function dragstarted(d) {
            if (!d3.event.active) {
              simulation.alphaTarget(1.0).restart();
            }
          }

          function dragged(d) {
            d.fx = d3.event.x;
            d.fy = d3.event.y;
          }

          function dragended(d) {
            if (!d3.event.active) {
              simulation.alphaTarget(0);
            }
            d.fx = undefined;
            d.fy = undefined;
          }

          nodes
            .append("circle")
            .attr("r", function(d) {
              d.originalRadius = Math.round(sizeScale(d.value));
              d.radius = d.originalRadius;
              return sizeScale(d.value);
            })
            .classed("circle", true)
            .attr("fill", "#ffffff");

          nodes
            .append('foreignObject')
            .classed("object", true)
            .classed("foreign-object", true)
            .attr("width", function(d) {
              return (d.radius * 2) - 10;
            })
            .attr("height", function(d) {
              return 36;
            })
            .attr("x", function(d) {
              return Math.round((d.radius * -1) + 5);
            })
            .attr("y", function(d) {
              return Math.round((d.radius * -1) / 3);
            })
            .append("xhtml:section")
            .style("text-align", "center")
            .append("div")
            .attr("class", "text-label")
            .style("margin", "0px auto")
            .style("font", "")
            .html(function(d) {
              return d.title;
            });

          nodes
            .append('foreignObject')
            .classed("full-object", true)
            .classed("foreign-object", true)
            .classed("extra-long", function(d) {
              /*
              * If its an extra long line, add this class
              * - But don't add the class if its Boston Childrens Hospital or Liberty Mutual.
              */
              if (d.full.split(" ").length >= 3 && d.full.indexOf('Boston') !== 0 && d.full.indexOf('Liberty') !== 0) {
                return true;
              }
              return false;
            })
            .attr("width", function(d) {
              return (d.radius * 2) - 10;
            })
            .attr("height", function(d) {
              return 48;
            })
            .attr("x", function(d) {
              return Math.round((d.radius * -1) + 5);
            })
            .attr("y", function(d) {
              return Math.round((d.radius * -1) / 3);
            })
            .append("xhtml:section")
            .style("text-align", "center")
            .append("div")
            .classed("text-full-label", true)
            .style("margin", "0px auto")
            .style("font", "")
            .html(function(d) {
              return d.full;
            });

          nodes
            .append('foreignObject')
            .classed("sub-object", true)
            .classed("foreign-object", true)
            .attr("width", function(d) {
              return (d.radius * 2) - 10;
            })
            .attr("height", function(d) {
              return 36;
            })
            .attr("x", function(d) {
              return (d.radius * -1) + 5
            })
            .attr("y", function(d) {
              if (d.radius >= 60) {
                return 0;
              } else {
                return -9;
              }
            })
            .append("xhtml:section")
            .style("text-align", "center")
            .append("div")
            .classed("text-sub-label", true)
            .style("margin", "0px auto")
            .style("font", "")
            .html(function(d) {
              return d.value;
            });

          var forceCollide = d3.forceCollide().radius(function(d) {
            return d.radius + 5;
          }).iterations(2);

          simulation
              .nodes(data.jobs)
              .force("collide", forceCollide)
              .on("tick", ticked);

          function ticked() {
            nodes.attr("transform", function(d) {
              var boundedX = Math.max(d.radius, Math.min(BUBBLES.width - d.radius, d.x));
              var boundedY = Math.max(d.radius, Math.min(BUBBLES.height - d.radius, d.y));

              return 'translate(' + [boundedX, boundedY] + ')';
            });
          }
        }
      });
    }
  };
  BUBBLES.init();
})();
