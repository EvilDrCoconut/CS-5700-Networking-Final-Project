/**
 * Created by Jason on 8/2/16.
 */

var FF = FF || {};

/**
 * FF - Map.js
 *
 *
 */
FF.Map = (function ($) {

    var els = {};

    var pub = {};

    var imagePath = baseURL + "/wp-content/themes/nu/components/Map/images";

    var duration = {
        open: 100,
        close: 400
    };

    var delay = 0;

    var size = {
        dot : {
            start : 3.16,
            end : 4.74
        },
        legend : {
            start : 30,
            end : 45
        }
    };

    pub.init = init;

    function highlight(layerId, targetCircle) {

        var group = els.mapLayers.filter(function () {
            return d3.select(this).attr('data-layer') === layerId;
        });
        group.moveToFront();

        // Animate the group
        group.selectAll('circle')
            .transition()
            .on('start', function(){
                d3.select(this).attr('highlighting', 'on')
            })
            .on('end', function() {
                d3.select(this).attr('highlighting', 'off')
            })
            .duration(duration.open)
            .delay(delay)
            .attr("r", size.dot.end);

        if (typeof targetCircle == 'object') {
            // Animate the circle a little bigger
            targetCircle.transition().duration(duration.open).delay(delay)
                .attr("r", size.dot.end * 1.5);
        }

        // Animate the legend
        var legendItem = els.mapLegend.filter(function () {
            return d3.select(this).attr('data-layer') === layerId;
        })

        // Add active class to the item
        legendItem.classed('active', true);

        legendItem.selectAll('circle')
            .transition()
            .duration(duration.open)
            .delay(delay)
            .attr("r", size.legend.end);
    }

    function unHighlight(layerId, targetCircle) {

        setTimeout(function() {
            var group = els.mapLayers.filter(function () {
                return d3.select(this).attr('data-layer') === layerId;
            });

            // Animate the group
            group.selectAll('circle')
                .transition()
                .duration(duration.close)
                .delay(delay)
                .attr("r", size.dot.start);

            if (typeof targetCircle == 'object') {
                // Animate the circle a little bigger
                targetCircle.transition().duration(duration.close).delay(delay)
                    .attr("r", size.dot.start);
            }

            // Animate the legend
            var legendItem = els.mapLegend.filter(function () {
                return d3.select(this).attr('data-layer') === layerId;
            })

            legendItem.classed('active', false);

            legendItem.selectAll('circle').transition().duration(duration.close).delay(delay)
                .attr("r", size.legend.start);
        },
        150)
    }

    function bindEvents() {
        //console.log("bind");

        els.mapLayers = d3.selectAll('.map-layer svg g[class^="dots"]');
        els.mapLegend = d3.selectAll(".map-legend .map-legend-item");

        els.circles = els.mapLayers.selectAll("circle");

        //console.log(els.circles, els.mapLegend);

        els.circles.each(function(d,i) {
            var circle = d3.select(this);
            circle.attr("start-r", circle.attr("r"));
        });

        els.circles.on('mouseenter', function() {
            //console.log('mouseenter');
            // Get this circle
            var circle = d3.select(this);

            // Find current group
            var group = d3.select(this.parentNode);

            var layerId = group.attr('data-layer');

            highlight(layerId, circle);

        })
            .on('mouseleave', function() {
                //console.log('mouseleave');
                var circle = d3.select(this);
                var group = d3.select(this.parentNode);
                var layerId = group.attr('data-layer');

                unHighlight(layerId, circle);

            });

        els.mapLegend.on('mouseenter', function(event) {

            // Get the circle
            //console.log('mouseenter');
            //console.log(this);
            var legendItem = d3.select(this);

            var circle = legendItem.select('circle');

            var layerId = legendItem.attr('data-layer');

            highlight(layerId, circle);

        })
            .on('mouseleave', function() {
                //console.log("mouseleave");
                // Get the circle
                var legendItem = d3.select(this);

                var circle = legendItem.select('circle');

                var layerId = legendItem.attr('data-layer');

                unHighlight(layerId, circle);
            })
    }

    function resizeHack() {
        /*
         Here we do the hack.
         With the math type: percent * height/width
         we are adjust the total height of an element who is depend in width.
         */

            els.mapLayer.each(function() {
                var svg = d3.select(this);

                var width = els.mapLayer.width();
                var height = width * (510.2 / 850.4 );
                els.mapLayer.css({
                    height: height
                });
            });
    }

    function init() {

        els.mapLayer = $('.map .map-layer');

        if (els.mapLayer.length > 0) {
            els.maps = $([
                'Dots_All_Layered_with_map.svg'
            ]);

            $.when(
                $.ajax({
                    url: imagePath + '/' + els.maps[0],
                    dataType: 'text'
                })
                    .then(function(data) {
                        els.mapLayer.append(data);
                        //console.log(data);
                    })
            )
                .then(function() {
                    bindEvents();
                    resizeHack();
                    FF.homePage.resize();
                });

            $(window).on('resize', resizeHack);
        }
    }

    return pub;

})(jQuery);

// https://github.com/wbkd/d3-extended
d3.selection.prototype.moveToFront = function() {
    return this.each(function(){
        this.parentNode.appendChild(this);
    });
};

d3.selection.prototype.moveToBack = function() {
    return this.each(function() {
        var firstChild = this.parentNode.firstChild;
        if (firstChild) {
            this.parentNode.insertBefore(this, firstChild);
        }
    });
};

jQuery(document).ready(FF.Map.init);
